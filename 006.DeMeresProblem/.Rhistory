prop[i] <- count[i]/x$total}
res = list(side, count, prop)
res
}
fair50_sum <- summary(fair_50rolls)
summary.roll <- function(x) {
structure(x, class = "summary.toss")
side <- x$side
#create a counter vector
count <- vector()
for (i in 1:6){
count[i] <- length(which(x$rolls == x$sides[i]))}
#create a proportion vector
prop <- vector()
for (i in 1:6){
prop[i] <- count[i]/x$total}
res = list(side, count, prop)
res
}
print.summary.roll <- function(x, ...) {
cat('summary "roll"\n\n')
freqs <- data.frame(x$side, x$count, x$prop)
print(freqs)
invisible(x)
}
############NOTE: summary.roll should contain only "freq" and
############ print.summary.roll should print "summary roll"
#fair50 summary
fair50_sum <- summary(fair_50rolls)
fair50_sum
class(fair50_sum)
names(fair50_sum)
summary.roll <- function(x) {
structure(x, class = "summary.toss")
side <- x$side
#create a counter vector
count <- vector()
for (i in 1:6){
count[i] <- length(which(x$rolls == x$sides[i]))}
#create a proportion vector
prop <- vector()
for (i in 1:6){
prop[i] <- count[i]/x$total}
freqs = list(side, count, prop)
return(freqs)
}
rm(print.summary.roll)
fair50_sum <- summary(fair_50rolls)
fair50_sum
fair50_sum
class(fair50_sum)
summary.roll <- function(x) {
side <- x$side
#create a counter vector
count <- vector()
for (i in 1:6){
count[i] <- length(which(x$rolls == x$sides[i]))}
#create a proportion vector
prop <- vector()
for (i in 1:6){
prop[i] <- count[i]/x$total}
freqs = list(side, count, prop)
class(freqs) <- "summary.toss"
return(freqs)
}
fair50_sum <- summary(fair_50rolls)
fair50_sum
class(fair50_sum)
names(fair50_sum)
summary.roll <- function(x) {
side <- x$side
#create a counter vector
count <- vector()
for (i in 1:6){
count[i] <- length(which(x$rolls == x$sides[i]))}
#create a proportion vector
prop <- vector()
for (i in 1:6){
prop[i] <- count[i]/x$total}
freqs <- list(side, count, prop)
class(freqs) <- "summary.toss"
return(freqs)
}
fair50_sum <- summary(fair_50rolls)
fair50_sum
class(fair50_sum)
names(fair50_sum)
fair50_sum$freqs
summary.roll <- function(x) {
side <- x$side
#create a counter vector
count <- vector()
for (i in 1:6){
count[i] <- length(which(x$rolls == x$sides[i]))}
#create a proportion vector
prop <- vector()
for (i in 1:6){
prop[i] <- count[i]/x$total}
freqs <- list()
frqes[1] = side
freqs[2] = count
freqs[3] = prop
class(freqs) <- "summary.toss"
return(freqs)
}
fair50_sum <- summary(fair_50rolls)
fair50_sum
names(fair50_sum)
class(fair50_sum)
summary.roll <- function(x) {
side <- x$side
#create a counter vector
count <- vector()
for (i in 1:6){
count[i] <- length(which(x$rolls == x$sides[i]))}
#create a proportion vector
prop <- vector()
for (i in 1:6){
prop[i] <- count[i]/x$total}
a <- list(side, count, prop)
freqs <- data.frame(a)
class(freqs) <- "summary.toss"
return(freqs)
}
fair50_sum <- summary(fair_50rolls)
fair50_sum
names(fair50_sum)
summary.roll <- function(x) {
side <- x$side
#create a counter vector
count <- vector()
for (i in 1:6){
count[i] <- length(which(x$rolls == x$sides[i]))}
#create a proportion vector
prop <- vector()
for (i in 1:6){
prop[i] <- count[i]/x$total}
freqs <- list(data.frame(side, count, prop))
class(freqs) <- "summary.toss"
return(freqs)
}
fair50_sum <- summary(fair_50rolls)
fair50_sum
names(fair50_sum)
summary.roll <- function(x) {
side <- x$side
#create a counter vector
count <- vector()
for (i in 1:6){
count[i] <- length(which(x$rolls == x$sides[i]))}
#create a proportion vector
prop <- vector()
for (i in 1:6){
prop[i] <- count[i]/x$total}
freqs <- list(data.frame(side, count, prop))
class(freqs) <- "summary.toss"
freqs
}
fair50_sum <- summary(fair_50rolls)
fair50_sum
class(fair50_sum)
names(fair50_sum)
summary.roll <- function(x) {
side <- x$side
#create a counter vector
count <- vector()
for (i in 1:6){
count[i] <- length(which(x$rolls == x$sides[i]))}
#create a proportion vector
prop <- vector()
for (i in 1:6){
prop[i] <- count[i]/x$total}
res <- list(
freqs <- data.frame(side, count, prop))
res
class(res) <- "summary.toss"
}
fair50_sum <- summary(fair_50rolls)
fair50_sum
summary.roll <- function(x) {
side <- x$side
#create a counter vector
count <- vector()
for (i in 1:6){
count[i] <- length(which(x$rolls == x$sides[i]))}
#create a proportion vector
prop <- vector()
for (i in 1:6){
prop[i] <- count[i]/x$total}
res <- list(
freqs <- data.frame(side, count, prop))
class(res) <- "summary.toss"
res
}
fair50_sum <- summary(fair_50rolls)
fair50_sum
names(fair50_sum)
class(fair50_sum)
fair50_sum$freqs
"[<-.roll" <- function(x, i, value) {
#x is a "roll" object
if (value != x$sides[1] & value != x$sides[2] &
value != x$sides[3] & value != x$sides[4] &
value != x$sides[5] & value != x$sides[6]) {
stop(sprintf('\nreplacing value must be %s', x$sides))}
x$rolls[i] <- value
######I should fix the below line
x
}
fair500[500] <- 1
# roll fair die
set.seed(123)
fair_die <- die()
fair500 <- roll(fair_die, times = 500)
"[.roll" <- function(x, i) {
x$rolls[i]}
"[<-.roll" <- function(x, i, value) {
#x is a "roll" object
if (value != x$sides[1] & value != x$sides[2] &
value != x$sides[3] & value != x$sides[4] &
value != x$sides[5] & value != x$sides[6]) {
stop(sprintf('\nreplacing value must be %s', x$sides))}
x$rolls[i] <- value
######I should fix the below line
x
}
fair500[500] <- 1
fair500[500]
fair500
fair500 <- roll(fair_die, times = 500)
set.seed(123)
fair_die <- die()
fair500 <- roll(fair_die, times = 500)
fair500[500] <- 1
# roll fair die
set.seed(123)
fair_die <- die()
fair500 <- roll(fair_die, times = 500)
fair500[500]
fair500
fair500[500] <- 1
fair500[500]
fair500
"+.roll" <- function(obj, incr) {
if (length(incr) != 1 | incr <= 0) {
stop("\ninvalid increament (must be positive)")
}
more_roll <- roll(obj$coin, times = incr)
more_roll
}
fair600 <- fair500 + 100
"+.roll" <- function(obj, incr) {
if (length(incr) != 1 | incr <= 0) {
stop("\ninvalid increament (must be positive)")
}
more_roll <- roll(obj, incr)
more_roll
}
fair600 <- fair500 + 100
names(fair500)
fair500$rolls
names(fair500)
# adding 100 rolls
"+.roll" <- function(obj, incr) {
if (length(incr) != 1 | incr <= 0) {
stop("\ninvalid increament (must be positive)")}
more_roll <- sample(obj$sides, size = obj$total, prob = obj$prob, replace = TRUE)
more_roll
}
fair600 <- fair500 + 100
fair600
"+.roll" <- function(obj, incr) {
if (length(incr) != 1 | incr <= 0) {
stop("\ninvalid increament (must be positive)")}
more_roll <- sample(obj$sides, size = obj$total + incr, prob = obj$prob, replace = TRUE)
more_roll
}
fair600 <- fair500 + 100
fair600
"+.roll" <- function(obj, incr) {
if (length(incr) != 1 | incr <= 0) {
stop("\ninvalid increament (must be positive)")}
more_roll <- sample(obj$sides, size = incr, prob = obj$prob, replace = TRUE)
list(obj, more_roll)
}
fair600 <- fair500 + 100
fair600
"+.roll" <- function(obj, incr) {
if (length(incr) != 1 | incr <= 0) {
stop("\ninvalid increament (must be positive)")}
more_roll <- sample(obj$sides, size = incr, prob = obj$prob, replace = TRUE)
obj
more_roll
}
fair600 <- fair500 + 100
fair600
# adding 100 rolls
"+.roll" <- function(obj, incr) {
if (length(incr) != 1 | incr <= 0) {
stop("\ninvalid increament (must be positive)")}
more_roll <- sample(obj$sides, size = incr, prob = obj$prob, replace = TRUE)
return(c(obj, more_roll)
}
fair600 <- fair500 + 100
"+.roll" <- function(obj, incr) {
if (length(incr) != 1 | incr <= 0) {
stop("\ninvalid increament (must be positive)")}
more_roll <- sample(obj$sides, size = incr, prob = obj$prob, replace = TRUE)
return(c(obj, more_roll))
}
fair600 <- fair500 + 100
fair600
"+.roll" <- function(obj, incr) {
if (length(incr) != 1 | incr <= 0) {
stop("\ninvalid increament (must be positive)")}
more_roll <- sample(obj$sides, size = incr, prob = obj$prob, replace = TRUE)
c(obj, more_roll)
}
fair600 <- fair500 + 100
fair600
"+.roll" <- function(obj, incr) {
if (length(incr) != 1 | incr <= 0) {
stop("\ninvalid increament (must be positive)")}
more_roll <- sample(obj$sides, size = incr, prob = obj$prob, replace = TRUE)
c(obj, more_roll$rolls)
}
fair600 <- fair500 + 100
"+.roll" <- function(obj, incr) {
if (length(incr) != 1 | incr <= 0) {
stop("\ninvalid increament (must be positive)")}
more_die <- die()
more_roll <- roll(more_die, times = incr)
c(obj, more_roll$rolls)
}
fair600 <- fair500 + 100
fair600
"+.roll" <- function(obj, incr) {
if (length(incr) != 1 | incr <= 0) {
stop("\ninvalid increament (must be positive)")}
more_die <- die()
more_roll <- roll(more_die, times = incr)
more_roll$rolls
}
fair600 <- fair500 + 100
fair600
"+.roll" <- function(obj, incr) {
if (length(incr) != 1 | incr <= 0) {
stop("\ninvalid increament (must be positive)")}
more_die <- die()
more_roll <- roll(more_die, times = incr)
obj
more_roll$rolls
}
fair600 <- fair500 + 100
fair600 <- fair500 + 100
fair600
"+.roll" <- function(obj, incr) {
if (length(incr) != 1 | incr <= 0) {
stop("\ninvalid increament (must be positive)")}
more_die <- die()
more_roll <- roll(more_die, times = incr)
c(obj, more_roll$rolls)
}
fair600 <- fair500 + 100
"+.roll" <- function(obj, incr) {
if (length(incr) != 1 | incr <= 0) {
stop("\ninvalid increament (must be positive)")}
more_die <- die()
more_roll <- roll(more_die, times = incr)
return(c(obj, more_roll$rolls))
}
fair600 <- fair500 + 100
fair600
"+.roll" <- function(obj, incr) {
if (length(incr) != 1 | incr <= 0) {
stop("\ninvalid increament (must be positive)")}
more_die <- die()
more_roll <- roll(more_die, times = incr)
c(obj, more_roll$rolls)
}
fair600 <- fair500 + 100
fair600
"+.roll" <- function(obj, incr) {
if (length(incr) != 1 | incr <= 0) {
stop("\ninvalid increament (must be positive)")}
more_die <- die()
more_roll <- roll(more_die, times = incr)
a <- merge(obj, more_roll)
a
}
fair600 <- fair500 + 100
"+.roll" <- function(obj, incr) {
if (length(incr) != 1 | incr <= 0) {
stop("\ninvalid increament (must be positive)")}
more_die <- die()
more_roll <- roll(more_die, times = incr)
a <- c(obj, more_roll)
a
}
fair600 <- fair500 + 100
fair600
"+.roll" <- function(obj, incr) {
if (length(incr) != 1 | incr <= 0) {
stop("\ninvalid increament (must be positive)")}
more_die <- die()
more_roll <- roll(more_die, times = incr)
obj
}
fair600 <- fair500 + 100
fair600
summary(fair600)
summary.roll <- function(x) {
side <- x$side
#create a counter vector
count <- vector()
for (i in 1:6){
count[i] <- length(which(x$rolls == x$sides[i]))}
#create a proportion vector
prop <- vector()
for (i in 1:6){
prop[i] <- count[i]/x$total}
res <- list(
freqs <- data.frame(side, count, prop))
class(res) <- "summary.roll"
res
}
summary(fair600)
#Plots
plot.roll <- function(x, side = 1, ...) {
#create a vector "a" that contains counts
count <- vector()
for (i in 1:6){
count[i] <- length(which(x$rolls == x$sides[i]))}
#create a vector "b" that contains proportions
prop <- vector()
for (i in 1:6){
prop[i] <- count[i]/x$total
}
names(prop) <- x$sides
barplot(prop, xlab = "sides of die",
ylab = "relative frequencies")
title(sprintf("Frequencies in a series of %s die rolls", x$total))
}
plot(fair_50rolls)
plot(fair500, 500)
"+.roll" <- function(obj, incr) {
if (length(incr) != 1 | incr <= 0) {
stop("\ninvalid increament (must be positive)")}
more_die <- die()
more_roll <- roll(more_die, times = incr)
res <- c(obj, more_roll)
res
}
fair600 <- fair500 + 100
fair600
"+.roll" <- function(obj, incr) {
if (length(incr) != 1 | incr <= 0) {
stop("\ninvalid increament (must be positive)")}
more_die <- die()
more_roll <- roll(more_die, times = incr)
res$rolls <- c(obj$rolls, more_roll$rolls)
res
}
fair600 <- fair500 + 100
# adding 100 rolls
"+.roll" <- function(obj, incr) {
if (length(incr) != 1 | incr <= 0) {
stop("\ninvalid increament (must be positive)")}
more_die <- die()
more_roll <- roll(more_die, times = incr)
res <- list(sides, rolls, prob, total)
res$rolls <- c(obj$rolls, more_roll$rolls)
res
}
fair600 <- fair500 + 100
summary(fair500)
names(fair500)
"+.roll" <- function(obj, incr) {
if (length(incr) != 1 | incr <= 0) {
stop("\ninvalid increament (must be positive)")}
more_die <- die()
more_roll <- roll(more_die, times = incr)
res <- list(sides = obj$sides,
rolls = (c(obj$rolls, more_roll$rolls)),
prob = obj$prob,
total = obj$total + more_roll$total)
res
}
fair600 <- fair500 + 100
fair600
summary(fair600)
"+.roll" <- function(obj, incr) {
if (length(incr) != 1 | incr <= 0) {
stop("\ninvalid increament (must be positive)")}
more_die <- die()
more_roll <- roll(more_die, times = incr)
res <- list(sides = obj$sides,
rolls = (c(obj$rolls, more_roll$rolls)),
prob = obj$prob,
total = obj$total + more_roll$total)
class(res) <- "roll"
res
}
fair600 <- fair500 + 100
summary(fair600)
fair600
fair600 <- fair500 + 100
fair600
summary(fair500)
summary(fair600)
source('C:/Users/SEO/Desktop/Josh/School/UCB/Spring 2018/Stat 133/hw-stat133/hw05/die_object.R', echo=TRUE)
plot(fair500, 500)
