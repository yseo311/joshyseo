source('C:/Users/SEO/Desktop/영찬/학교/UCB/Spring 2018/Stat 133/hw-stat133/hw03/code/binomial-functions.R')
source('C:/Users/SEO/Desktop/영찬/학교/UCB/Spring 2018/Stat 133/hw-stat133/hw03/code/binomial-functions.R')
bin_distribution <- function(trials, prob){
i = 1 #initial value
d = list() #empty list
index_column = list() #index list
col1 = list("success", "probability") #column names
if (is_nonneg_integer(trials) & is_probability(prob)){
for (i in 0:trials){
d[i] = bin_combinations(trials, i) * (prob^i) * ((1 - prob)^(trials-i))
index_column[i] = i
}
d <- do.call("cbind", c(index_column, d)
df <- do.call("rbind", c(col1,d))
return(df)
}
else{stop("invaid inputs")}
}
#' @example
bin_distribution(trials = 5, prob = 0.5)
bin_distribution <- function(trials, prob){
i = 1 #initial value
d = list() #empty list
index_column = list() #index list
col1 = list("success", "probability") #column names
if (is_nonneg_integer(trials) & is_probability(prob)){
for (i in 0:trials){
d[i] = bin_combinations(trials, i) * (prob^i) * ((1 - prob)^(trials-i))
index_column[i] = i
}
d <- do.call("cbind", c(index_column, d))
df <- do.call("rbind", c(col1,d))
return(df)
}
else{stop("invaid inputs")}
}
#' @example
bin_distribution(trials = 5, prob = 0.5)
##BIN distribution############################
#' @title distribution
#' @description finds the distribution
#' @param trial nonnegative integer
#' @param prob real number in between 0 and 1 (can be 0 or 1)
#' @return computed value
bin_distribution <- function(trials, prob){
i = 1 #initial value
d = list() #empty list
index_column = list() #index list
col1 = list("success", "probability") #column names
if (is_nonneg_integer(trials) & is_probability(prob)){
for (i in 0:trials){
d[i] = bin_combinations(trials, i) * (prob^i) * ((1 - prob)^(trials-i))
index_column[i] = i
}
d <- do.call("rbind", c(index_column, d))
df <- do.call("cbind", c(col1,d))
return(df)
}
else{stop("invaid inputs")}
}
#' @example
bin_distribution(trials = 5, prob = 0.5)
bin_distribution <- function(trials, prob){
i = 1 #initial value
d = list() #empty list
index_column = list() #index list
col1 = list("success", "probability") #column names
if (is_nonneg_integer(trials) & is_probability(prob)){
for (i in 0:trials){
d[i] = bin_combinations(trials, i) * (prob^i) * ((1 - prob)^(trials-i))
index_column[i] = i
}
d <- do.call("cbind", c(index_column, d))
df <- do.call("cbind", c(col1,d))
return(df)
}
else{stop("invaid inputs")}
}
#' @example
bin_distribution(trials = 5, prob = 0.5)
bin_distribution <- function(trials, prob){
i = 1 #initial value
d = list() #empty list
index_column = list() #index list
col1 = list("success", "probability") #column names
if (is_nonneg_integer(trials) & is_probability(prob)){
for (i in 0:trials){
d[i] = bin_combinations(trials, i) * (prob^i) * ((1 - prob)^(trials-i))
index_column[i] = i
}
d <- do.call("cbind", c(index_column, d))
df <- do.call("rbind", c(col1,d))
return(df)
}
else{stop("invaid inputs")}
}
#' @example
bin_distribution(trials = 5, prob = 0.5)
bin_distribution <- function(trials, prob){
i = 1 #initial value
d = list() #empty list
index_column = list() #index list
col1 = list("success", "probability") #column names
if (is_nonneg_integer(trials) & is_probability(prob)){
for (i in 0:trials){
d[i] = bin_combinations(trials, i) * (prob^i) * ((1 - prob)^(trials-i))
index_column[i] = i
}
d <- do.call("cbind", c(index_column, d))
#df <- do.call("rbind", c(col1,d))
return(d
}
else{stop("invaid inputs")}
}
#' @example
bin_distribution(trials = 5, prob = 0.5)
bin_distribution <- function(trials, prob){
i = 1 #initial value
d = list() #empty list
index_column = list() #index list
col1 = list("success", "probability") #column names
if (is_nonneg_integer(trials) & is_probability(prob)){
for (i in 0:trials){
d[i] = bin_combinations(trials, i) * (prob^i) * ((1 - prob)^(trials-i))
index_column[i] = i
}
d <- do.call("cbind", c(index_column, d))
#df <- do.call("rbind", c(col1,d))
return(d)
}
else{stop("invaid inputs")}
}
#' @example
bin_distribution(trials = 5, prob = 0.5)
bin_distribution <- function(trials, prob){
i = 1 #initial value
d = list() #empty list
index_column = list() #index list
col1 = list("success", "probability") #column names
if (is_nonneg_integer(trials) & is_probability(prob)){
for (i in 0:trials){
d[i] = bin_combinations(trials, i) * (prob^i) * ((1 - prob)^(trials-i))
index_column[i] = i
}
d <- do.call("cbind", c(index_column, d))
#df <- do.call("cbind", c(col1,d))
return(d)
}
else{stop("invaid inputs")}
}
#' @example
bin_distribution(trials = 5, prob = 0.5)
bin_distribution <- function(trials, prob){
i = 1 #initial value
d = matrix(ncol = 1, nrow = i) #empty list
index_column = matrix(ncol = 1, nrow = i) #index list
col1 = list("success", "probability") #column names
if (is_nonneg_integer(trials) & is_probability(prob)){
for (i in 0:trials){
d[i] = bin_combinations(trials, i) * (prob^i) * ((1 - prob)^(trials-i))
index_column[i] = i
}
d <- do.call("cbind", c(index_column, d))
#df <- do.call("cbind", c(col1,d))
return(d)
}
else{stop("invaid inputs")}
}
#' @example
bin_distribution(trials = 5, prob = 0.5)
source('C:/Users/SEO/Desktop/영찬/학교/UCB/Spring 2018/Stat 133/hw-stat133/hw03/code/binomial-functions.R')
source('C:/Users/SEO/Desktop/영찬/학교/UCB/Spring 2018/Stat 133/hw-stat133/hw03/code/binomial-functions.R')
bin_distribution <- function(trials, prob){
i = 1 #initial value
d = list() #empty list
index_column = list() #index list
if (is_nonneg_integer(trials) & is_probability(prob)){
for (i in 0:trials){
d[i] = bin_combinations(trials, i) * (prob^i) * ((1 - prob)^(trials-i))
index_column[i] = i
}
d <- do.call("cbind", c(index_column, d))
#df <- do.call("cbind", c(col1,d))
return(d)
}
else{stop("invaid inputs")}
}
#' @example
bin_distribution(trials = 5, prob = 0.5)
bin_distribution <- function(trials, prob){
i = 1 #initial value
d = list() #empty list
index_column = list() #index list
if (is_nonneg_integer(trials) & is_probability(prob)){
for (i in 0:trials){
d[i] = bin_combinations(trials, i) * (prob^i) * ((1 - prob)^(trials-i))
index_column[i] = i
}
d <- data.frame("cbind", c(index_column, d))
return(d)
}
else{stop("invaid inputs")}
}
#' @example
bin_distribution(trials = 5, prob = 0.5)
bin_distribution <- function(trials, prob){
i = 1 #initial value
d = list() #empty list
index_column = list() #index list
if (is_nonneg_integer(trials) & is_probability(prob)){
for (i in 0:trials){
d[i] = bin_combinations(trials, i) * (prob^i) * ((1 - prob)^(trials-i))
index_column[i] = i
}
d <- data.frame("rbind", c(index_column, d))
return(d)
}
else{stop("invaid inputs")}
}
#' @example
bin_distribution(trials = 5, prob = 0.5)
bin_distribution <- function(trials, prob){
i = 1 #initial value
d = list() #empty list
index_column = list() #index list
if (is_nonneg_integer(trials) & is_probability(prob)){
for (i in 0:trials){
d[i] = bin_combinations(trials, i) * (prob^i) * ((1 - prob)^(trials-i))
index_column[i] = i
}
d <- cbind.data.frame(c(index_column, d))
return(d)
}
else{stop("invaid inputs")}
}
#' @example
bin_distribution(trials = 5, prob = 0.5)
source('C:/Users/SEO/Desktop/영찬/학교/UCB/Spring 2018/Stat 133/hw-stat133/hw03/code/binomial-functions.R')
bin_distribution <- function(trials, prob){
i = 1 #initial value
d = list() #empty list
index_column = list() #index list
if (is_nonneg_integer(trials) & is_probability(prob)){
for (i in 0:trials){
d[i] = bin_combinations(trials, i) * (prob^i) * ((1 - prob)^(trials-i))
index_column[i] = i
}
d <- rbind.data.frame(c(index_column, d))
return(d)
}
else{stop("invaid inputs")}
}
#' @example
bin_distribution(trials = 5, prob = 0.5)
bin_distribution <- function(trials, prob){
i = 1 #initial value
d = list() #empty list
index_column = list() #index list
if (is_nonneg_integer(trials) & is_probability(prob)){
for (i in 0:trials){
d[i] = bin_combinations(trials, i) * (prob^i) * ((1 - prob)^(trials-i))
index_column[i] = i
}
d <- rbind.data.frame(c(t(index_column), t(d)))
return(d)
}
else{stop("invaid inputs")}
}
#' @example
bin_distribution(trials = 5, prob = 0.5)
source('C:/Users/SEO/Desktop/영찬/학교/UCB/Spring 2018/Stat 133/hw-stat133/hw03/code/binomial-functions.R')
knitr::opts_chunk$set(echo = TRUE, error = TRUE, fig.path = 'images/')
library(ggplot2)
library(readr)
library(dplyr)
#setwd("C:/Users/SEO/Desktop/영찬/학교/UCB/Spring 2018/Stat 133/hw-stat133/hw03")
knitr::opts_chunk$set(echo = TRUE, error = TRUE, fig.path = 'images/')
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE, error = TRUE, fig.path = 'images/')
library(ggplot2)
#setwd("C:/Users/SEO/Desktop/영찬/학교/UCB/Spring 2018/Stat 133/hw-stat133/hw03")
knitr::opts_chunk$set(echo = TRUE, error = TRUE, fig.path = 'images/')
library(ggplot2)
#1 Assume that the “successful” event is getting a “six” when rolling a die. Consider rolling a fair die 10 times. Use bin_probability() to find the probability of getting exactly 3 sixes.
source('./code/binomial-functions.R')
bin_probability(10,3,(1/6))
#2 Use bin_distribution() to obtain the distribution of the number of “sixes” when rolling a loaded die 10 times, in which the number “six” has probability of 0.25. Make a plot of this distribution.
z <- bin_distribution(10, 0.25)
plot(z)
#3 Use bin_probability(), and a for loop, to obtain the probability of getting more than 3 heads in 5 tosses with a biased coin of 35% chance of heads.
j = 0
answer <- for(i in 4:5){
j <- j + bin_probability(5,i,0.35)
}
j
#4 Use bin_distribution() to obtain the probability distribution of the number of heads when tossing a loaded coin 15 times, with 35% chance of heads. Make a plot of this distribution.
w <- bin_distribution(trials = 15, prob = 0.35)
plot(w)
#1 Assume that the “successful” event is getting a “six” when rolling a die. Consider rolling a fair die 10 times. Use bin_probability() to find the probability of getting exactly 3 sixes.
source('./code/binomial-functions.R')
bin_probability(10,3,(1/6))
#2 Use bin_distribution() to obtain the distribution of the number of “sixes” when rolling a loaded die 10 times, in which the number “six” has probability of 0.25. Make a plot of this distribution.
z <- bin_distribution(10, 0.25)
plot(z)
#3 Use bin_probability(), and a for loop, to obtain the probability of getting more than 3 heads in 5 tosses with a biased coin of 35% chance of heads.
j = 0
answer <- for(i in 4:5){
j <- j + bin_probability(5,i,0.35)
}
j
#4 Use bin_distribution() to obtain the probability distribution of the number of heads when tossing a loaded coin 15 times, with 35% chance of heads. Make a plot of this distribution.
w <- bin_distribution(trials = 15, prob = 0.35)
plot(w)
summary(z)
setwd("C:/Users/SEO/Desktop/영찬/학교/UCB/Spring 2018/Stat 133/hw-stat133/hw03")
summary(z)
z
source('../code/binomial-functions.R')
bin_probability(10,3,(1/6))
#1 Assume that the “successful” event is getting a “six” when rolling a die. Consider rolling a fair die 10 times. Use bin_probability() to find the probability of getting exactly 3 sixes.
source('./code/binomial-functions.R')
bin_probability(10,3,(1/6))
Sys.setlocale('LC_ALL','C')
#1 Assume that the “successful” event is getting a “six” when rolling a die. Consider rolling a fair die 10 times. Use bin_probability() to find the probability of getting exactly 3 sixes.
source('./code/binomial-functions.R')
bin_probability(10,3,(1/6))
source('./code/binomial-functions.R')
Sys.setlocale('LC_ALL','C')
bin_probability(10,3,(1/6))
Sys.setlocale('LC_ALL')
bin_probability(10,3,(1/6))
Sys.setlocale()
bin_probability(10,3,(1/6))
Sys.setlocale('LC_ALL', NULL)
Sys.setlocale('LC_ALL', "")
bin_probability(10,3,(1/6))
Sys.setlocale('LC_ALL')
bin_probability(10,3,(1/6))
Sys.setlocale('LC_ALL',)
bin_probability(10,3,(1/6))
source('./code/binomial-functions.R')
#1 Assume that the “successful” event is getting a “six” when rolling a die. Consider rolling a fair die 10 times. Use bin_probability() to find the probability of getting exactly 3 sixes.
source('./code/binomial-functions.R')
Sys.setlocale('LC_ALL',)
bin_probability(10,3,(1/6))
#2 Use bin_distribution() to obtain the distribution of the number of “sixes” when rolling a loaded die 10 times, in which the number “six” has probability of 0.25. Make a plot of this distribution.
z <- bin_distribution(10, 0.25)
plot(z)
summary(z)
#3 Use bin_probability(), and a for loop, to obtain the probability of getting more than 3 heads in 5 tosses with a biased coin of 35% chance of heads.
j = 0
answer <- for(i in 4:5){
j <- j + bin_probability(5,i,0.35)
}
j
#4 Use bin_distribution() to obtain the probability distribution of the number of heads when tossing a loaded coin 15 times, with 35% chance of heads. Make a plot of this distribution.
w <- bin_distribution(trials = 15, prob = 0.35)
plot(w)
Sys.setlocale('LC_ALL',"C")
bin_probability(10,3,(1/6))
Sys.getlocale()
Sys.setlocale(category = 'LC_ALL',"C")
Sys.setlocale(category = 'LC_ALL',"C")
#1 Assume that the “successful” event is getting a “six” when rolling a die. Consider rolling a fair die 10 times. Use bin_probability() to find the probability of getting exactly 3 sixes.
source('./code/binomial-functions.R')
Sys.setlocale(category = 'LC_ALL',"C")
bin_probability(10,3,(1/6))
#2 Use bin_distribution() to obtain the distribution of the number of “sixes” when rolling a loaded die 10 times, in which the number “six” has probability of 0.25. Make a plot of this distribution.
z <- bin_distribution(10, 0.25)
plot(z)
summary(z)
#3 Use bin_probability(), and a for loop, to obtain the probability of getting more than 3 heads in 5 tosses with a biased coin of 35% chance of heads.
j = 0
answer <- for(i in 4:5){
j <- j + bin_probability(5,i,0.35)
}
j
#4 Use bin_distribution() to obtain the probability distribution of the number of heads when tossing a loaded coin 15 times, with 35% chance of heads. Make a plot of this distribution.
w <- bin_distribution(trials = 15, prob = 0.35)
plot(w)
#1 Assume that the “successful” event is getting a “six” when rolling a die. Consider rolling a fair die 10 times. Use bin_probability() to find the probability of getting exactly 3 sixes.
source('./code/binomial-functions.R')
Sys.setlocale(category = 'LC_ALL',"C")
bin_probability(10,3,(1/6))
#2 Use bin_distribution() to obtain the distribution of the number of “sixes” when rolling a loaded die 10 times, in which the number “six” has probability of 0.25. Make a plot of this distribution.
z <- bin_distribution(10, 0.25)
plot(z)
summary(z)
#3 Use bin_probability(), and a for loop, to obtain the probability of getting more than 3 heads in 5 tosses with a biased coin of 35% chance of heads.
j = 0
answer <- for(i in 4:5){
j <- j + bin_probability(5,i,0.35)
}
j
#4 Use bin_distribution() to obtain the probability distribution of the number of heads when tossing a loaded coin 15 times, with 35% chance of heads. Make a plot of this distribution.
w <- bin_distribution(trials = 15, prob = 0.35)
plot(w)
a = bin_distribution(trials = 5, prob = 0.5)
summary(a)
bin_distribution(trials = 5, prob = 0.5)
a = bin_distribution(trials = 5, prob = 0.5)
a
summary(a)
w <- bin_distribution(trials = 15, prob = 0.35)
w
plot(w)
summary(w)
w
summary(w)
bin_distribution <- function(trials, prob){
col1 = c(0:trials+1) #index list
col2 = col1 #probability column
for (i in 0:trials){
col2[1+i] =
bin_probability(prob=prob, trials=trials, success = i)
}
return(data.frame(cbind(success = col1, probability = col2)))
}
a = bin_distribution(trials = 5, prob = 0.5)
a
summary(a)
w <- bin_distribution(trials = 15, prob = 0.35)
w
w
summary(w)
bin_distribution <- function(trials, prob){
col1 = c(-1:trials) #index list
col2 = col1 #probability column
for (i in 0:trials){
col2[1+i] =
bin_probability(prob=prob, trials=trials, success = i)
}
return(data.frame(cbind(success = col1, probability = col2)))
}
#' @example
a = bin_distribution(trials = 5, prob = 0.5)
a
summary(a)
bin_distribution <- function(trials, prob){
col1 = c(-1:trials) #index list
col2 = col1 #probability column
for (i in 0:trials+1){
col2[1+i] =
bin_probability(prob=prob, trials=trials, success = i)
}
return(data.frame(cbind(success = col1, probability = col2)))
}
#' @example
a = bin_distribution(trials = 5, prob = 0.5)
a
summary(a)
bin_distribution <- function(trials, prob){
col1 = c(0:trials) #index list
col2 = col1 #probability column
for (i in -1:trials){
col2[1+i] =
bin_probability(prob=prob, trials=trials, success = i)
}
return(data.frame(cbind(success = col1, probability = col2)))
}
#' @example
a = bin_distribution(trials = 5, prob = 0.5)
a
summary(a)
bin_distribution <- function(trials, prob){
col1 = c(0:trials) #index list
col2 = col1 #probability column
for (i in 0:trials+1){
col2[1+i] =
bin_probability(prob=prob, trials=trials, success = i)
}
return(data.frame(cbind(success = col1, probability = col2)))
}
#' @example
a = bin_distribution(trials = 5, prob = 0.5)
a
bin_distribution <- function(trials, prob){
col1 = c(0:trials) #index list
col2 = col1 #probability column
for (i in 0:trials){
col2[i] =
bin_probability(prob=prob, trials=trials, success = i)
}
return(data.frame(cbind(success = col1, probability = col2)))
}
#' @example
a = bin_distribution(trials = 5, prob = 0.5)
a
bin_distribution <- function(trials, prob){
col1 = c(0:trials) #index list
col2 = col1 #probability column
for (i in 0:trials){
col2[1+i] =
bin_probability(prob=prob, trials=trials, success = i)
}
return(data.frame(cbind(success = col1, probability = col2)))
}
#' @example
a = bin_distribution(trials = 5, prob = 0.5)
a
summary(a)
w <- bin_distribution(trials = 15, prob = 0.35)
w
summary(w)
plot(w)
z <- bin_distribution(10, 0.25)
z
plot(z)
w <- bin_distribution(trials = 15, prob = 0.35)
w
plot(w)
rm(list=ls())
