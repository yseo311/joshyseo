+ geom_text()
ggplot(data = gsw, aes(x = height, y = weight))
+ \geom_text()
ggplot(data = gsw, aes(x = height, y = weight, label = player))
+ geom_text()
ggplot(data = gsw, aes(x = height, y = weight, label = 'player'))
+ geom_text()
ggplot(data = gsw, aes(x = height, y = weight, label = 'player'))
+ geom_text(size = 100)
ggplot(data = gsw, aes(x = height, y = weight, label = 'player'))
+\ geom_text(size = 100)
ggplot(data = gsw, aes(x = 'height', y = 'weight', label = 'player'))
+ geom_text()
ggplot(data = gsw, aes(x = height, y = weight) label = player)
ggplot(data = gsw, aes(x = height, y = weight) label = player)
+ geom_text()
ggplot(data = gsw, aes(x = height, y = weight, label = player))
+ geom_label()
?geom_text
?ggplot
?aes
ggplot(data = gsw, aes(x = height, y = weight, label = player))
+ geom_text()
ggplot(data = gsw, aes(x = height, y = weight, label = player))
ggplot(data = gsw, aes(x = height, y = weight, label = player))
+ geom_label()
ggplot(data = gsw, aes(x = height, y = weight)) + geom_point()
ggplot(data = gsw, aes(x = height, y = weight)) + geom_text()
ggplot(data = gsw, aes(x = height, y = weight, label = gsw$player)) + geom_text()
ggplot(data = gsw, aes(x = height, y = weight, label = gsw$player)) + geom_label()
ggplot(data = dat, aes(x = salary)) + geom_density()
ggplot(data = dat, aes(x = salary, y = density)) + geom_density()
ggplot(data = dat, aes(x = salary)) + geom_density()
ggplot(data = gsw, aes(x = height, y = weight, label = gsw$player)) + geom_point() + geom_label()
ggplot(data = dat, aes(x = points2)) + geom_histogram()
ggplot(data = dat, aes(x = points2)) + geom_histogram(binwidth = 50)
ggplot(data = dat, aes(x = position)) + geom_bar
ggplot(data = dat, aes(x = position)) + geom_bar()
#Make a scatterplot of experience and salary of all Centers, and use geom_smooth() to add a regression line.
ggplot(data = dat[dat$position=="C"], aes(x = experience, y = salary))
+geom_smooth()
dat[dat$position=="C"]
ggplot(data = filter(dat, position=="C"), aes(x = experience, y = salary))
+geom_smooth()
ggplot(data = centers, aes(x = experience, y = salary))
+geom_smooth()
centers <- filter(dat, position == "C")
ggplot(data = centers, aes(x = experience, y = salary))
+geom_smooth()
?geom_smooth
ggplot(data = centers, aes(x = experience, y = salary, ))
+ geom_smooth(family = gaussian)
ggplot(data = centers, aes(x = experience, y = salary))
+ geom_smooth()
ggplot(data = centers, aes(x = experience, y = salary))
+ geom_point
ggplot(data = centers, aes(x = experience, y = salary))
+ geom_point()
View(centers)
ggplot(data = centers, aes(x = experience, y = salary))
+ geom_smooth(method = 'lm')
ggplot(data = centers, aes(x = experience, y = salary))
+ geom_smooth(method = lm)
ggplot(data = centers, aes(x = experience, y = salary))
+ geom_smooth(method = "lm")
ggplot(data = centers, aes(x = experience, y = salary))
+ geom_point()
View(centers)
View(centers)
ggplot(data = centers, aes(x = experience, y = salary))
ggplot(data = centers, aes(x = experience, y = salary))
+ geom_point()
ggplot(data = centers)
+ geom_point(aes(x = experience, y = salary))
ggplot(data = centers, aes(x = experience, y = salary))
+ geom_point()
+ geom_smooth(method = "lm", formula = y~z)
ggplot(data = centers, aes(x = experience, y = salary))
+ geom_point()
+ geom_smooth(method = "lm", formula = y~x)
gsw_mpg <- arrange(
select(
mutate(
filter(dat, team == "GSW"), min_per_game = minutes/games
),
player, experience, min_per_game
),
desc(min_per_game)
)
gsw_mpg
ggplot(data = centers, aes(x = experience, y = salary))
+ geom_smooth(method = lm, formula = y~x, se = TRUE)
ggplot(data = centers, aes(x = experience, y = salary))
+ geom_smooth(formula = y~x, se = TRUE)
ggplot(data = centers, aes(x = experience, y = salary))
+ geom_smooth(method = lm, se=FALSE)
ggplot(data = centers, aes(x = experience, y = salary))+
geom_point(color='blue') +
geom_smooth(method = "lm", se = FALSE)
ggplot(data = centers, aes(x = experience, y = salary))+
geom_point(color='blue') +
geom_smooth(method = "lm", se = TRUE)
ggplot(data = centers, aes(x = experience, y = salary))+
geom_point(color='blue') +
geom_smooth(method = "glm", se = TRUE)
ggplot(data = centers, aes(x = experience, y = salary))+
geom_point(color='blue') +
geom_smooth(method = "lm", se = TRUE)
ggplot(data = centers, aes(x = experience, y = salary))+
geom_point() +
geom_smooth(method = "lm", se = TRUE)
ggplot(data = centers, aes(x = experience, y = salary))
+ geom_point()
+ geom_smooth(method = "lm", se = TRUE)
ggplot(data = centers, aes(x = experience, y = salary)) +
geom_point() +
geom_smooth(method = "lm", se = TRUE)
ggplot(data = centers, aes(x = experience, y = salary)) +
geom_point() +
geom_smooth(method = "loess", se = TRUE)
ggplot(data = centers, aes(x = experience, y = salary)) +
geom_point() +
geom_smooth()
ggplot(data = centers, aes(x = experience, y = salary)) +
geom_point() +
geom_smooth(method = "lm", se = TRUE)
ggplot(data = centers, aes(x = experience, y = salary)) +
geom_point() +
geom_smooth(method = "loess", se = TRUE)
ggplot(data = dat, aes(x = points, y = salary)) +
geom_point() +
facet_wrap(~ position)
# scatterplot by position
ggplot(data = dat, aes(x = points, y = salary)) +
geom_point(aes(color = position), alpha = 0.7) +
facet_grid(~ position) +
geom_smooth(method = loess)
# scatterplot by position
ggplot(data = dat, aes(x = points, y = salary)) +
geom_point(aes(color = position), alpha = 0.7) +
facet_grid(position ~ .) +
geom_smooth(method = loess)
ggplot(data = dat, aes(x = experience, y = salary)) +
geom_point() +
facet_wrap(~ position)
ggplot(data = dat, aes(x = experience, y = salary)) +
geom_point() +
facet_wrap(~ team)
ggplot(data = dat, aes(x = age)) +
geom_density() +
facet_wrap(~ team)
ggplot(data = dat, aes(x = height, y = weight)) +
geom_point() +
facet_wrap(~ position)
plot(data = dat, aes(x = height, y = weight)) +
geom_density2d() +
facet_wrap(~ position)
ggplot(data = dat, aes(x = height, y = weight)) +
geom_density2d() +
facet_wrap(~ position)
ggplot(data = gsw, aes(x = experience, y = salary)) +
theme_bw()
ggplot(data = gsw, aes(x = experience, y = salary)) +
theme_bw(base_size = 11, base_family = "")
View(gsw)
gsw_exp_sal <- filter(dat, team=="GSW")
rm(gsw_exp_sal
)
gsw_noselection <- filter(dat, team=="GSW")
ggplot(data = gsw_noselection, aes(x = experience, y = salary)) +
theme_bw()
ggplot(data = gsw_noselection, aes(x = experience, y = salary)) +
geom_point() +
theme_bw()
ggplot(data = gsw_noselection, aes(x = experience, y = salary)) +
geom_point() +
theme_minimal()
gsw_noselection <- filter(dat, team=="GSW")
ggplot(data = gsw_noselection, aes(x = experience, y = salary)) +
geom_point() +
theme_bw()
ggplot(data = gsw_noselection, aes(x = experience, y = salary)) +
geom_point() +
theme_minimal()
ggplot(data = gsw_noselection, aes(x = experience, y = salary)) +
geom_point() +
theme_classic()
ggplot(data = gsw_noselection, aes(x = experience, y = salary)) +
geom_point() +
theme_dark()
ggplot(data = gsw_noselection, aes(x = experience, y = salary)) +
geom_point() +
theme_dark() +
theme_classic() +
theme_minimal()
ggplot(data = dat, aes(x = height, y = weight)) +
geom_density2d() +
geom_point() +
facet_wrap(~ position)
```{r NBA Players Data}
#NBA Players Data
library(dplyr)
library(ggplot2)
library(readr)
# with "base" read.csv()
dat <- read.csv('nba2017-players.csv', stringsAsFactors = FALSE)
# first three rows
three_rows <- slice(dat, 1:3)
three_rows
# subset rows given a condition
# (height greater than 85 inches)
gt_85 <- filter(dat, height > 85)
gt_85
# columns by name
player_height <- select(dat, player, height)
##YOUR TURN1
#use slice() to subset the data by selecting the first 5 rows.
five_rows <- slice(dat, 1:5)
five_rows
#use slice() to subset the data by selecting rows 10, 15, 20, ..., 50.
rows_by_fives <- slice(dat, 5*2:50)
rows_by_fives
#use slice() to subset the data by selecting the last 5 rows.
last_five <- slice(dat, 437:441)
last_five
#use filter() to subset those players with height less than 70 inches tall.
heigt_70 <- filter(dat, height<70)
heigt_70
#use filter() to subset rows of Golden State Warriors ('GSW').
gsw <- filter(dat, team=="GSW")
gsw
#use filter() to subset rows of GSW centers ('C').
gsw_c <- filter(dat, team == "GSW" & position == "C")
gsw_c
#use filter() and then select(), to subset rows of lakers ('LAL'), and then display their names.
LAL_players <- select(filter(dat, team == "LAL"), player)
LAL_players
## operator %% for recursive use of functions (?)
#use filter() and then select(), to display the name and salary, of GSW point guards
GSW_info <- select(filter(gsw, position == "PG"), player, team, position, salary)
GSW_info
#find how to select the name, age, and team, of players with more than 10 years of experience, making 10 million dollars or less.
sort_exp_sal <- select(filter(dat, experience>10 & salary<=10000000),
player, age, experience, salary)
sort_exp_sal
#find how to select the name, team, height, and weight, of rookie players, 20 years old, displaying only the first five occurrences (i.e. rows)
rookies <- select(filter(dat, age==20), player, age, team, height, weight)
head(rookies, n=5)
# creating a small data frame step by step
gsw <- select(gsw, player, height, weight)
gsw <- slice(gsw, c(4, 8, 10, 14, 15))
gsw
mutate(gsw, height / weight)
mutate(gsw, ht_wt = height / weight)
gsw2 <- mutate(gsw, ht_m = height * 0.0254, wt_kg = weight * 0.4536)
gsw2
# order rows by height (increasingly)
arrange(gsw, height)
# order rows by height (decreasingly)
arrange(gsw, desc(height))
# order rows by height, and then weight
arrange(gsw, height, weight)
#YOUR TURN2
#using the data frame gsw, add a new variable product with the product of height and weight.
mutate(gsw, height * weight)
#create a new data frame gsw3, by adding columns log_height and log_weight with the log transformations of height and weight.
#used natural log (ln)
gsw3 <- mutate(gsw, log_height=log(height), log_weight=log(weight))
gsw3
#use the original data frame to filter() and arrange() those players with height less than 71 inches tall, in increasing order.
arrange(filter(dat, height <71))
#display the name, team, and salary, of the top-5 highest paid players
head(select(arrange(dat, desc(salary)), player, team, salary), n=5)
#display the name, team, and salary, for the top-5 highest paid players
#same as above
#display the name, team, and points3, of the top 10 three-point players
head(select(arrange(dat, desc(points3)), player, team, points3), n=10)
#create a data frame gsw_mpg of GSW players, that contains variables for player name, experience, and min_per_game (minutes per game), sorted by min_per_game (in descending order)
gsw_mpg <- arrange(
select(
mutate(
filter(dat, team == "GSW"), min_per_game = minutes/games
),
player, experience, min_per_game
),
desc(min_per_game)
)
gsw_mpg
# average salary of NBA players
summarise(dat, avg_salary = mean(salary))
# some stats for salary (dplyr)
summarise(
dat,
min = min(salary),
median = median(salary),
avg = mean(salary),
max = max(salary)
)
# average salary, grouped by team
summarise(
group_by(dat, team),
avg_salary = mean(salary)
)
# average salary, grouped by position
summarise(
group_by(dat, position),
avg_salary = mean(salary)
)
#rearrange
arrange(
summarise(
group_by(dat, position),
avg_height = mean(height),
avg_weight = mean(weight)),
desc(avg_height)
)
#YOUR TURN3
#use summarise() to get the largest height value.
summarise(dat, max(height))
#use summarise() to get the standard deviation of points3.
summarise(dat, sd(points3))
#use summarise() and group_by() to display the median of three-points, by team.
summarise(group_by(dat, team), median(points3))
#display the average triple points by team, in ascending order, of the bottom-5 teams (worst 3pointer teams)
tail(arrange(summarise(group_by(dat, team), avg_triple = mean(points3)), desc(avg_triple)), n=5)
#obtain the mean and standard deviation of age, for Power Forwards, with 5 and 10 years (including) years of experience.
summarise(
filter(dat,
position == "PF"
& c(experience == 5 | experience == 10)),
mean_age = mean(age), std_dv_age = sd(age)
)
# scatterplot (option 1)
ggplot(data = dat) +
geom_point(aes(x = points, y = salary))
# scatterplot (option 2)
ggplot(data = dat, aes(x = points, y = salary)) +
geom_point()
# colored scatterplot
ggplot(data = dat, aes(x = points, y = salary)) +
geom_point(aes(color = position))
# sized and colored scatterplot
ggplot(data = dat, aes(x = points, y = salary)) +
geom_point(aes(color = position, size = points3))
# sized and colored scatterplot
ggplot(data = dat, aes(x = points, y = salary)) +
geom_point(aes(color = position, size = points3), alpha = 0.7)
#YOUR TURN4
#Open the ggplot2 cheatsheet
#Use the data frame gsw to make a scatterplot of height and weight.
ggplot(data = gsw, aes(x = height, y = weight)) + geom_point()
#Find out how to make another scatterplot of height and weight, using geom_text() to display the names of the players.
ggplot(data = gsw, aes(x = height, y = weight, label = gsw$player)) + geom_text()
#Get a scatter plot of height and weight, for ALL the warriors, displaying their names with geom_label().
ggplot(data = gsw, aes(x = height, y = weight, label = gsw$player)) + geom_label()
#Get a density plot of salary (for all NBA players).
ggplot(data = dat, aes(x = salary)) + geom_density()
#Get a histogram of points2 with binwidth of 50 (for all NBA players).
ggplot(data = dat, aes(x = points2)) + geom_histogram(binwidth = 50)
#Get a barchart of the position frequencies (for all NBA players).
ggplot(data = dat, aes(x = position)) + geom_bar()
#Make a scatterplot of experience and salary of all Centers, and use geom_smooth() to add a regression line.
centers <- filter(dat, position == "C")
ggplot(data = centers, aes(x = experience, y = salary)) +
geom_point() +
geom_smooth(method = "lm", se = TRUE)
#Repeat the same scatterplot of experience and salary of all Centers, but now use geom_smooth() to add a loess line (i.e. smooth line).
ggplot(data = centers, aes(x = experience, y = salary)) +
geom_point() +
geom_smooth(method = "loess", se = TRUE)
# scatterplot by position
ggplot(data = dat, aes(x = points, y = salary)) +
geom_point() +
facet_wrap(~ position)
# scatterplot by position
ggplot(data = dat, aes(x = points, y = salary)) +
geom_point(aes(color = position), alpha = 0.7) +
facet_grid(~ position) +
geom_smooth(method = loess)
# scatterplot by position
ggplot(data = dat, aes(x = points, y = salary)) +
geom_point(aes(color = position), alpha = 0.7) +
facet_grid(position ~ .) +
geom_smooth(method = loess)
#YOUR TURN5
#Make scatterplots of experience and salary faceting by position
ggplot(data = dat, aes(x = experience, y = salary)) +
geom_point() +
facet_wrap(~ position)
#Make scatterplots of experience and salary faceting by team
ggplot(data = dat, aes(x = experience, y = salary)) +
geom_point() +
facet_wrap(~ team)
#Make density plots of age faceting by team
ggplot(data = dat, aes(x = age)) +
geom_density() +
facet_wrap(~ team)
#Make scatterplots of height and weight faceting by position
ggplot(data = dat, aes(x = height, y = weight)) +
geom_point() +
facet_wrap(~ position)
#Make scatterplots of height and weight, with a 2-dimensional density, geom_density2d(), faceting by position
ggplot(data = dat, aes(x = height, y = weight)) +
geom_density2d() +
geom_point() +
facet_wrap(~ position)
#Make a scatterplot of experience and salary for the Warriors, but this time add a layer with theme_bw() to get a simpler background
gsw_noselection <- filter(dat, team=="GSW")
ggplot(data = gsw_noselection, aes(x = experience, y = salary)) +
geom_point() +
theme_bw()
#Repeat any of the previous plots but now adding a leyer with another theme e.g. theme_minimal(), theme_dark(), theme_classic()
ggplot(data = gsw_noselection, aes(x = experience, y = salary)) +
geom_point() +
theme_minimal()
ggplot(data = gsw_noselection, aes(x = experience, y = salary)) +
geom_point() +
theme_dark()
ggplot(data = gsw_noselection, aes(x = experience, y = salary)) +
geom_point() +
theme_classic()
ggplot(data = gsw_noselection, aes(x = experience, y = salary)) +
geom_point() +
theme_minimal()
str(dat)
write_csv(str(dat), "C:/Users/SEO/Desktop/영찬/학교/UCB/Spring 2018/Stat 133/Labs Submitted/Lab06/output/str_dat.csv")
str_dat <- str(dat)
write_csv(str_dat, "C:/Users/SEO/Desktop/영찬/학교/UCB/Spring 2018/Stat 133/Labs Submitted/Lab06/output/str_dat.csv")
sink(file = "C:/Users/SEO/Desktop/영찬/학교/UCB/Spring 2018/Stat 133/Labs Submitted/Lab06/output/str_dat.csv")
sink(file = "C:/Users/SEO/Desktop/영찬/학교/UCB/Spring 2018/Stat 133/Labs Submitted/Lab06/output/str_dat.txt")
str(dat)
sink()
sink(file = "C:/Users/SEO/Desktop/영찬/학교/UCB/Spring 2018/Stat 133/Labs Submitted/Lab06/output/str_dat.csv")
sink()
View(GSW_info)
rm(str_dat)
rm(list = ls())
rm(list = ls())
?load
setwd("C:/Users/SEO/Desktop/영찬/학교/UCB/Spring 2018/Stat 133/hw-stat133/hw02")
#title: Data Prep
#description: Data preparation phase, of which the goal is to create a csv data file "shots-data.csv" that will contain the required variables to be used in the visualization phase.
#input(s):stephen-curry.csv, draymond-green.csv, kevin-durant.csv, klay-thompson.csv, andre-iguodala.csv
#outputs(): adjusted data sets, combined data set, summaries, etc.
library(readr)
library(ggplot2)
library(dplyr)
#set working directory
#setwd("C:/Users/SEO/Desktop/영찬/학교/UCB/Spring 2018/Stat 133/hw-stat133/hw02")
#PART 2.1 & PART 3
#data import
curry <- read.csv("./data/stephen-curry.csv", stringsAsFactors = FALSE)
green <- read.csv("./data/draymond-green.csv", stringsAsFactors = FALSE)
durant <- read.csv("./data/kevin-durant.csv", stringsAsFactors = FALSE)
thompson <- read.csv("./data/klay-thompson.csv", stringsAsFactors = FALSE)
iguodala <- read.csv("./data/andre-iguodala.csv", stringsAsFactors = FALSE)
#adjust data: add name
curry["name"] = "Stephen Curry"
green["name"] = "Draymond Green"
durant["name"] = "Kevin Durant"
thompson["name"] = "Klay Thompson"
iguodala["name"] = "Andre Iguodala"
#adjust data: shots made and missed
curry$shot_made_flag[curry$shot_made_flag == "y"] <- "made_shot"
curry$shot_made_flag[curry$shot_made_flag == "n"] <- "missed_shot"
green$shot_made_flag[green$shot_made_flag == "y"] <- "made_shot"
green$shot_made_flag[green$shot_made_flag == "n"] <- "missed_shot"
durant$shot_made_flag[durant$shot_made_flag == "y"] <- "made_shot"
durant$shot_made_flag[durant$shot_made_flag == "n"] <- "missed_shot"
thompson$shot_made_flag[thompson$shot_made_flag == "y"] <- "made_shot"
thompson$shot_made_flag[thompson$shot_made_flag == "n"] <- "missed_shot"
iguodala$shot_made_flag[iguodala$shot_made_flag == "y"] <- "made_shot"
iguodala$shot_made_flag[iguodala$shot_made_flag == "n"] <- "missed_shot"
#adjust data: minute scored
mutate(curry, minute = ((period*12) - minutes_remaining)) -> curry
mutate(green, minute = ((period*12) - minutes_remaining)) -> green
mutate(durant, minute = ((period*12) - minutes_remaining)) -> durant
mutate(thompson, minute = ((period*12) - minutes_remaining)) -> thompson
mutate(iguodala, minute = ((period*12) - minutes_remaining)) -> iguodala
mutate(shots_data, minute = ((period*12) - minutes_remaining)) -> shots_data
#sink summary
sink(file = "./output/stephen-curry-summary.txt")
summary(curry)
sink()
sink(file = "./output/draymond-green-summary.txt")
summary(green)
sink()
sink(file = "./output/kevin-durant-summary.txt")
summary(durant)
sink()
sink(file = "./output/klay-thompson-summary.txt")
summary(thompson)
sink()
sink(file = "./output/andre-iguodala-summary.txt")
summary(iguodala)
sink()
#combine dataframes
shots_data <- rbind(curry, green, durant, thompson, iguodala)
write.csv(shots_data, file = "./data/shots-data.csv")
#shots_data_summary
sink(file = "./output/shots-data-summary.txt")
summary(shots_data)
sink()
setwd("C:/Users/SEO/Desktop/영찬/학교/UCB/Spring 2018/Stat 133/hw-stat133/hw02")
curry <- read.csv("data/stephen-curry.csv", stringsAsFactors = FALSE)
green <- read.csv("data/draymond-green.csv", stringsAsFactors = FALSE)
durant <- read.csv("data/kevin-durant.csv", stringsAsFactors = FALSE)
thompson <- read.csv("data/klay-thompson.csv", stringsAsFactors = FALSE)
iguodala <- read.csv("data/andre-iguodala.csv", stringsAsFactors = FALSE)
library(readr)
library(ggplot2)
library(dplyr)
