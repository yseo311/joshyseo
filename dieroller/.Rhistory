#' @title plot.roll
#' @description defines a plot function for roll
#' @param x roll
#' @return a plot for roll result
plot.roll <- function(x, side = 1, ...) {
#create a count vector
count <- vector()
for (i in 1:6){
count[i] <- length(which(x$rolls == x$sides[i]))}
#create a proprotion vector
prop <- vector()
for (i in 1:6){
prop[i] <- count[i]/x$total
}
#create a name vector
names(prop) <- x$sides
#create a plot
barplot(prop, xlab = "sides of die",
ylab = "relative frequencies")
#title
title(sprintf("Frequencies in a series of %s die rolls", x$total))
}
#' @title extraction function
#' @description enable extracting an element from roll
#' @param x roll
#' @param i index number
#' @return extraction enabled
"[.roll" <- function(x, i) {
x$rolls[i]}
#' @title replacement method
#' @description enable replacing an element of roll
#' @param x roll
#' @param i index number
#' @return replacement enabled
"[<-.roll" <- function(x, i, value) {
#x is a "roll" object
if (value != x$sides[1] & value != x$sides[2] &
value != x$sides[3] & value != x$sides[4] &
value != x$sides[5] & value != x$sides[6]) {
stop(sprintf('\nreplacing value must be %s', x$sides))}
x$rolls[i] <- value
x}
#' @title addition method
#' @description enable adding rolls to an input roll
#' @param obj roll
#' @param incr number of rolls user wants to add
#' @return input rolls + new rolls
"+.roll" <- function(obj, incr) {
if (length(incr) != 1 | incr <= 0) {
stop("\ninvalid increament (must be positive)")}
more_die <- die()
more_roll <- roll(more_die, times = incr)
res <- list(sides = obj$sides,
rolls = (c(obj$rolls, more_roll$rolls)),
prob = obj$prob,
total = obj$total + more_roll$total)
class(res) <- "roll"
res}
library(dieroller)
library(roxygen2)
library(dieroller)
devtools::document()
devtools::use_vignette("dieroller")
usethis::use_vignette()
usethis::use_vignette("dieroller")
devtools::build_vignettes()
devtools::build_vignettes()
devtools::load_all()
devtools::use_testthat()
usethis::use_testthat()
devtools::test()
devtools::test(dieroller)
devtools::test(dieroller.R)
devtools::test(die_object.R)
devtools::test(die_object.R, "dieroller")
devtools::test(die_object.R, "dieroller")
devtools::test(die_object.R, "dieroller")
devtools::test(die_object.R, "dieroller")
devtools::test()
devtools::test()
fair50_sum
export()
@export
devtools::document()
devtools::document()
devtools::test()
devtools::test("testthat")
setwd("C:/Users/SEO/Desktop/Josh/School/UCB/Spring 2018/Stat 133/hw-stat133/dieroller/tests")
devtools::test("testthat")
devtools::test()
devtools::document()
devtools::install_github("yseo311/dieroller")
setwd("C:/Users/SEO/Desktop/Josh/School/UCB/Spring 2018/Stat 133/hw-stat133/hw05")
setwd("C:/Users/SEO/Desktop/Josh/School/UCB/Spring 2018/Stat 133/hw-stat133/hw05"
setwd("C:/Users/SEO/Desktop/Josh/School/UCB/Spring 2018/Stat 133/hw-stat133/hw05")
setwd("C:/Users/SEO/Desktop/Josh/School/UCB/Spring 2018/Stat 133/hw-stat133/hw05")
setwd("C:/Users/SEO/Desktop/Josh/School/UCB/Spring 2018/Stat 133/hw-stat133/hw05")
library(dieroller)
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
#From HW 4: codes that maybe helpful
#setwd("C:/Users/SEO/Desktop/Josh/School/UCB/Spring 2018/Stat 133/hw-stat133/hw05")
#source('../code/archive-functions.R')
#knitr::opts_chunk$set(echo = TRUE, error = TRUE, fig.path = '../images/')
library(dieroller)
fair_die <- die()
fair_die
game1 <- roll(fair_die, 4000)
game1
game1_sum <- summary(game1)
game1_sum
game1 <- roll(fair_die, 4)
game1_sum <- summary(game1)
game1_sum
rm(list=lis())
rm(list=ls())
fair_die <- die()
game1_1000times <- vector()
for (i in 1:1000) {
a <- roll(fair-die, 4)
game1_1000times[i] <- length(a$rolls == 6)
}
fair_die <- die()
game1_1000times <- vector()
for (i in 1:1000) {
a <- roll(fair_die, 4)
game1_1000times[i] <- length(a$rolls == 6)
}
game1_1000times
fair_die <- die()
game1_1000times <- vector()
for (i in 1:1000) {
a <- roll(fair_die, 4)
game1_1000times[i] <- length(a$rolls == 6)
a <- 0
}
game1_1000times <- vector()
a <- vector()
for (i in 1:1000) {
a[i] <- roll(fair_die, 4)
game1_1000times[i] <- length(a[i]$rolls == 6)
}
rm(a)
fair_die <- die()
game1 <- roll(fair_die, 4)
sumamry(game1)
summary(game1)
game1_sum <- summary(game1)
length(game1_sum$side == 6)
fair_die <- die()
game1 <- roll(fair_die, 4)
game1_sum <- summary(game1)
game1_sum$freqs$count[game1_sum$freqs$side == 6]
game1_sum
knitr::opts_chunk$set(echo = TRUE)
#From HW 4: codes that maybe helpful
#setwd("C:/Users/SEO/Desktop/Josh/School/UCB/Spring 2018/Stat 133/hw-stat133/hw05")
#source('../code/archive-functions.R')
#knitr::opts_chunk$set(echo = TRUE, error = TRUE, fig.path = '../images/')
library(dieroller)
rm(list = ls())
rolls_4000 <- roll(fair_die, 4000)
summary(rolls_4000)
for (i in 1:1000){
length(
for (j in 1*i:4*i){
which(rolls_4000[j] != 6)
})
}
for (i in 1:1000){
length(
for (j in 1*i:4*i){
which(rolls_4000[j] != "6")
})
}
summary(rolls_4000)
rolls_4000$rolls[1]
for (i in 1:1000){
for (j in 1*i:4*i){
which(rolls_4000$rolls[j] != "6")
}
}
length(
for(k in 1:4){
which(rolls_4000$rolls[k] != 6)
})
rolls_4000$rolls[1:4]
for (i in 1:1000){
length(
for (j in 1*i:4*i){
which(rolls_4000$rolls[j] != "6")
})
}
for (i in 1:1000){
a <- length(
for (j in 1*i:4*i){
which(rolls_4000$rolls[j] != "6")
})
a
}
a <- vector()
for (i in 1:1000){
a[i] <- length(
for (j in 1*i:4*i){
which(rolls_4000$rolls[j] != "6")
})
}
a
length(
for(k in 1:4){
which(rolls_4000$rolls[k] != 6)
})
seq(4)
seq(100, 4)
seq(1, 100, 4)
x <- seq(1, 100, 4)
x[2]
for (i in 1:20){
x <- seq(1, 100, 4)
x[i]
}
x <- seq(1, 100, 4)
for (i in 1:20){
x[i]
}
x <- seq(1, 100, 4)
for (i in 1:20){
print(x[i])
}
x <- seq(1, 100, 4)
for (i in 1:20){
return(x[i])
}
a <- seq(1, 1000, 4)
a
b <- seq(4, 1000, 4)
b
a <- seq(1, 1000, 4)
b <- seq(4, 1000, 4)
c <- vector()
for (i in 1:250){
for (j in a[i]:b[i]){
c[i] <- length(which(rolls_4000$rolls[j] == "6"))
}
}
c
rolls_4000[5:8]
rolls_4000$rolls[5:8]
fair_die <- die()
rolls_4000 <- roll(fair_die, 4000)
rolls_4000$rolls[1:4]
rolls_4000$rolls[5:8]
rolls_4000$rolls[9:12]
a <- seq(1, 1000, 4)
b <- seq(4, 1000, 4)
c <- vector()
for (i in 1:250){
for (j in a[i]:b[i]){
c[i] <- length(which(rolls_4000$rolls[j] == "6"))
}
}
c
a
b
seq(a[1],b[1])
for (l in a[1]:b[1]){
length(which(rolls_4000$rolls[j] == "6"))
}
for (l in a[1]:b[1]){
print(length(which(rolls_4000$rolls[j] == "6")))
}
for (l in 1:4){
print(length(which(rolls_4000$rolls[j] == "6")))
}
for (l in 1:4){
which(rolls_4000$rolls[j] == "6")
}
for (l in 1:4){
rolls_4000$rolls[j] == "6"
}
length(
for (l in 1:4){
rolls_4000$rolls[j] == "6"
})
for (l in 9:12){
rolls_4000$rolls[j] == "6"
})
length(
for (l in 9:12){
rolls_4000$rolls[j] == "6"
})
rolls_4000$rolls[9]
rolls_4000$rolls[10]
rolls_4000$rolls[10] == "6"
length(rolls_4000$rolls[10] == "6")
length(rolls_4000$rolls[9:12] == "6")
rolls_4000$rolls[9:12]
rolls_4000$rolls[9:12] == "6"
sum(rolls_4000$rolls[9:12] == "6")
a <- seq(1, 1000, 4)
b <- seq(4, 1000, 4)
c <- vector()
for (i in 1:250){
for (j in a[i]:b[i]){
c[i] <- sum(rolls_4000$rolls[j] == "6")
}
}
c
sum(rolls_4000$rolls[9:12] == "6")
for (i in a[1]:b[1]) {
sum(rolls_4000$rolls[9:12] == "6")
}
for (i in a[1]:b[1]) {
print(
sum(rolls_4000$rolls[i] == "6")
)
}
sum(
for (i in a[3]:b[3]) {
rolls_4000$rolls[i] == "6"
})
for (i in a[3]:b[3]) {
rolls_4000$rolls[i] == "6"
}
sum(
for (i in a[3]:b[3]) {
if (
rolls_4000$rolls[i] == "6"){
TRUE
}
else {FALSE}
})
for (i in a[3]:b[3]) {
if (
rolls_4000$rolls[i] == "6"){
return(TRUE)
}
else {
return(FALSE)}
}
for (i in a[3]:b[3]) {
if (
rolls_4000$rolls[i] == "6"){
c[3] <- TRUE
}
else {
c[3] <- FALSE}
}
c[3]
for (i in a[3]:b[3]) {
c[3] <- sum(rolls_4000$rolls[i] == "6")
}
c[3]
a[3]
b[3]
rolls_4000$rolls[9:12]
sum(rolls_4000$rolls[9:12])
rolls_4000$rolls[9:12] == "6"
sum(rolls_4000$rolls[9:12] == "6")
c[3] <- sum(rolls_4000$rolls[9:12] == "6")
c[3] <- sum(rolls_4000$rolls[a[3]:b[3]] == "6")
sum(rolls_4000$rolls[a[3]:b[3]] == "6")
for (i in 1:250){
c[i] <- sum(rolls_4000$rolls[a[i]:b[i]] == "6")
}
rolls_4000$rolls[33:36]
rolls_4000$rolls[29:32]
for (i in 1:250){
c[i] <- sum(rolls_4000$rolls[a[i]:b[i]] == "6")
}
c
rolls_4000$rolls[3997:4000]
rolls_4000$rolls[3981:3092]
rolls_4000$rolls[3981:3992]
rolls_4000$rolls[3981:4000]
c
fair_die <- die()
rolls_4000 <- roll(fair_die, 4000)
rolls_4000$rolls[3981:4000]
a <- seq(1, 1000, 4)
b <- seq(4, 1000, 4)
c <- vector()
for (i in 1:250){
c[i] <- sum(rolls_4000$rolls[a[i]:b[i]] == "6")
}
c
rolls_4000$rolls[1:12]
rolls_4000$rolls[3997:4000]
rolls_4000$rolls[3981:4000]
b[250]
a <- seq(1, 4000, 4)
b <- seq(4, 4000, 4)
c <- vector()
for (i in 1:1000){
c[i] <- sum(rolls_4000$rolls[a[i]:b[i]] == "6")
}
c
rolls_4000$rolls[3981:4000]
rolls_4000$rolls[1000]
sum(rolls_4000$rolls[3981:4000] == "6")
sum(rolls_4000$rolls[3997:4000] == "6")
sum(c$[1:1000] != 0)
sum(c[1:1000] != 0)
505/1000
(5/6)^4
1 - (5/6)^4
setwd("C:/Users/SEO/Desktop/Josh/School/UCB/Spring 2018/Stat 133/hw-stat133/hw05")
setwd("C:/Users/SEO/Desktop/Josh/School/UCB/Spring 2018/Stat 133/hw-stat133/hw05")
knitr::opts_chunk$set(echo = TRUE)
#setwd("C:/Users/SEO/Desktop/Josh/School/UCB/Spring 2018/Stat 133/hw-stat133/hw05")
library(dieroller)
#create a fair die
fair_die <- die()
#roll the die 4000 times
rolls_4000 <- roll(fair_die, 4000)
#a is a sequence of numbers 1, 5, 9, 13,...,3997
a <- seq(1, 4000, 4)
#b is a sequence of numbers 4, 8, 12, 16,...,4000
b <- seq(4, 4000, 4)
#c is a list that will contain number of "6" in every 4 rolls
c <- vector()
#Count the number of "6" in [1:4], [5:8],...,[3997:4000] and store it in c[1:1000]
for (i in 1:1000){
c[i] <- sum(rolls_4000$rolls[a[i]:b[i]] == "6")
}
#count the number of "4-roll-game" that has at least one "6"
sum(c[1:1000] != 0)
#Relative frequency of "4-roll-game" with at least one "6"
sum(c[1:1000] != 0)/1000
#Analytical Computation
1 - (5/6)^4
#Result
#We can conclude that the empirical data we obtained through the experiment is very close to the analytically computed value
rolls_48000 <- roll(fair_die, 48000)
x <- seq(1, 48000, 2)
#y is a sequence of every even numbers
y <- seq(2, 48000, 2)
#z is a list that will contain number of "6" in every 4 rolls
z <- vector()
for (i in 1:24000){
z[i] <- sum(rolls_4000$rolls[x[i]:y[i]] == "6")
}
sum(z[1:24000] == 2)
for (i in 1:24000){
z[i] <- sum(rolls_48000$rolls[x[i]:y[i]] == "6")
}
sum(z[1:24000] == 2)
m <- seq(1, 1000, 24)
m
n <- seq(24, 1000, 24)
n
n <- seq(24, 1001, 24)
m <- seq(1, 24000, 24)
n <- seq(24, 24000, 24)
m <- seq(1, 24000, 24)
n <- seq(24, 24000, 24)
m[1000]
n[1000]
k <- vector()
for (l in 1:1000){
k[l] <- sum(z[m[l]:n[l]] == "2")
}
k <- vector()
for (l in 1:1000){
k[l] <- sum(z[m[l]:n[l]] == 2)
}
sum(k[1:1000] != 0)/1000
1 - (35/36)^24
sum(k[1:1000] != 0)
rm(list=ls())
a <- ("1,", "2", NA, "4")
b <- ("a", "b", "c", "d")
c <- data.frame(a, b)
a <- c("1,", "2", NA, "4")
b <- c("a", "b", "c", "d")
c <- data.frame(a, b)
c
c[3,1]
c[3,2]
c[a]
c["a"]
c["B"]
c[,"b"]
c[,"a"]
c["a"]
c["b"]
?as.factor
as.factor("3")
as.factor("3") + as.factor("4")
is.factor("3")
is.integer(3)
is.integer("3")
is.integer(factor("3"))
factor("3") == integer
1L
1M
1E
1F
1T
is.integer(1L)
0x10L
0x10L
1e3L
a <- c(1, 2, 3)
b <- c(4, 5, 6)
c <- data.frame(a,b)
c[TRUE, TRUE]
c[TRUE,]
c[TRUE, FALSE]
c[FALSE, TRUE]
c[FALSE, FALSE]
c[3, TRUE]
